{"version":3,"sources":["components/Input.js","components/Button.js","components/Card.js","components/Spinner.js","api/api.js","components/App.js","serviceWorker.js","index.js"],"names":["Input","placeHolder","handleChange","type","className","placeholder","onChange","Button","title","handleClick","onClick","Card","src","alt","subtitle","likes","Spinner","api","baseUrl","apiKey","this","_baseUrl","_apiKey","query","fetch","headers","Authorization","then","res","json","App","React","useState","cards","setCards","isLoading","setIsLoading","searchString","setSearchString","useEffect","search","data","results","map","item","id","urls","regular","alt_description","user","name","description","console","log","props","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+UAaeA,MAVf,YAA6C,IAA7BC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,aACzB,OACI,2BACAC,KAAK,OACLC,UAAU,QACVC,YAAaJ,EACbK,SAAUJ,K,MCCHK,MAPf,YAAuC,IAAtBC,EAAqB,EAArBA,MAAOC,EAAc,EAAdA,YACpB,OACI,4BAAQL,UAAU,SAASM,QAASD,GAAcD,I,MCY3CG,MAdf,YAAgE,IAAjDC,EAAgD,EAAhDA,IAAKC,EAA2C,EAA3CA,IAAKL,EAAsC,EAAtCA,MAAOM,EAA+B,EAA/BA,SAAUC,EAAqB,EAArBA,MAAON,EAAc,EAAdA,YAC7C,OACI,yBAAKL,UAAU,QACX,yBAAKA,UAAU,WAAWQ,IAAKA,EAAKC,IAAKA,EAAKH,QAASD,IACvD,yBAAKL,UAAU,oBACX,uBAAGA,UAAU,cAAcI,EAC3B,0BAAMJ,UAAU,cAAhB,KAAgCW,EAAhC,YAEA,uBAAGX,UAAU,gBAAgBI,MAAOM,GAAWA,M,MCFhDE,MANf,WACI,OACI,yBAAKZ,UAAU,Y,cCmBRa,EANH,I,WAjBV,cAAkC,IAApBC,EAAmB,EAAnBA,QAASC,EAAU,EAAVA,OAAU,oBAC/BC,KAAKC,SAAWH,EAChBE,KAAKE,QAAUH,E,mDAGVI,GACL,OAAOC,MAAM,GAAD,OAAIJ,KAAKC,SAAT,gCAAyCE,GAAS,CAC5DE,QAAS,CACPC,cAAc,aAAD,OAAeN,KAAKE,YAGlCK,MAAK,SAAAC,GAAG,OAAIA,EAAIC,c,KAMX,CAAQ,CAClBX,QAAS,4BAEPC,OAAQ,gDC2BGW,MAxCf,WAAgB,IAAD,EACeC,IAAMC,SAAS,IAD9B,mBACJC,EADI,KACGC,EADH,OAEuBH,IAAMC,UAAS,GAFtC,mBAEJG,EAFI,KAEOC,EAFP,OAG6BL,IAAMC,SAAS,IAH5C,mBAGJK,EAHI,KAGUC,EAHV,KAsBX,OAjBAP,IAAMQ,WAAU,WACZH,GAAa,GACbnB,EAAIuB,OAAOH,GAAcV,MAAK,SAAAc,GAC1BP,EAASO,EAAKC,QAAQC,KAAI,SAAAC,GAAI,MAAK,CAC/BC,GAAID,EAAKC,GACTjC,IAAKgC,EAAKE,KAAKC,QACflC,IAAK+B,EAAKI,gBACVxC,MAAOoC,EAAKK,KAAKC,KACjBpC,SAAU8B,EAAKO,YACfpC,MAAO6B,EAAK7B,MACZN,YAAa,WACT2C,QAAQC,IAAI,eAGpBjB,GAAa,QAElB,CAACC,IAEA,yBAAKjC,UAAU,OACX,yBAAKA,UAAU,eACX,yBAAKA,UAAU,cACX,kBAAC,EAAD,CAAOH,YAAY,sIACnB,kBAAC,EAAD,CAAQO,MAAO,uCAAUC,YAAa,WAClC6B,EAAgB,YAGxB,yBAAKlC,UAAU,aACV+B,EAAY,kBAAC,EAAD,MAAaF,EAAMU,KAAI,gBAAEE,EAAF,EAAEA,GAAOS,EAAT,6BAAoB,kBAAC,EAAD,eAAMC,IAAKV,GAAQS,WC5B3EE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.dc12cb4c.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Input.css'\r\n\r\nfunction Input({placeHolder, handleChange}) {\r\n    return (\r\n        <input\r\n        type=\"text\"\r\n        className=\"Input\"\r\n        placeholder={placeHolder}\r\n        onChange={handleChange}\r\n        />\r\n    )\r\n}\r\nexport default Input","import React from 'react'\r\nimport './Button.css'\r\n\r\nfunction Button({title, handleClick}) {\r\n    return (\r\n        <button className=\"Button\" onClick={handleClick}>{title}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button","import React from 'react'\r\nimport './Card.css'\r\n\r\nfunction Card({src, alt, title, subtitle, likes, handleClick}) {\r\n    return (\r\n        <div className=\"Card\">\r\n            <img className=\"Card_img\" src={src} alt={alt} onClick={handleClick}/>\r\n            <div className=\"Card_description\">\r\n                <p className=\"Card_title\">{title}\r\n                <span className=\"Card_likes\">  {likes} ♥</span>\r\n                </p>\r\n                <p className=\"Card_subtitle\" title={subtitle}>{subtitle}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card\r\n","import React from 'react'\r\nimport './Spinner.css'\r\n\r\nfunction Spinner() {\r\n    return (\r\n        <div className=\"loader\" />\r\n    )\r\n}\r\n\r\nexport default Spinner","class Api {\n  constructor({ baseUrl, apiKey }) {\n    this._baseUrl = baseUrl;\n    this._apiKey = apiKey;\n  }\n\n  search(query) {\n    return fetch(`${this._baseUrl}/search/photos?query=${query}`, {\n      headers: {\n        Authorization: `Client-ID ${this._apiKey}`\n      }\n    })\n      .then(res => res.json())\n  }\n\n}\n\n\nconst api = new Api({\n  baseUrl: 'https://api.unsplash.com/',\n//  apiKey: 'e58e3582c206680c1a9401c750a2bd8293920f8e7cc301b614c14cb5f58c1bc1'\n    apiKey: '_fZkMjUcq2LatGDs3V0jFXhylBJYPF9HDraItzx6QFw'\n})\n\nexport default api;\n","import React from 'react';\nimport './App.css';\nimport Input from './Input';\nimport Button from './Button';\nimport Card from \"./Card\";\nimport Spinner from \"./Spinner\";\nimport api from '../api/api';\n\nfunction App() {\n    const [cards, setCards] = React.useState([])\n    const [isLoading, setIsLoading] = React.useState(false)\n    const [searchString, setSearchString] = React.useState('')\n\n    React.useEffect(() => {\n        setIsLoading(true)\n        api.search(searchString).then(data => {\n            setCards(data.results.map(item => ({\n                id: item.id,\n                src: item.urls.regular,\n                alt: item.alt_description,\n                title: item.user.name,\n                subtitle: item.description,\n                likes: item.likes,\n                handleClick: () => {\n                    console.log('click')\n                }\n            })))\n            setIsLoading(false)\n        })\n    }, [searchString])\n    return (\n        <div className=\"App\">\n            <div className=\"App-content\">\n                <div className=\"App-search\">\n                    <Input placeHolder=\"Введите текст для поиска\"/>\n                    <Button title={\"Искать\"} handleClick={() => {\n                        setSearchString('Dogs')\n                    }}/>\n                </div>\n                <div className=\"App-cards\">\n                    {isLoading ? <Spinner/> : cards.map(({id, ...props}) => <Card key={id} {...props} />)}\n                </div>\n            </div>\n\n        </div>\n    );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}