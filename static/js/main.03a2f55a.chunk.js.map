{"version":3,"sources":["components/Input.js","components/Button.js","components/Spinner.js","components/Card.js","components/Main.js","components/Photo.js","components/NotFound.js","api/api.js","components/App.js","serviceWorker.js","index.js"],"names":["Input","placeHolder","handleChange","value","type","className","placeholder","onChange","event","target","Button","title","rest","Spinner","Card","src","alt","subtitle","likes","id","to","Main","handleSubmit","searchString","setSearchString","isSubmitted","cards","onSubmit","map","card","key","Photo","photos","useParams","photo","find","NotFound","api","baseUrl","apiKey","this","_baseUrl","_apiKey","query","fetch","headers","Authorization","then","res","json","App","React","useState","setCards","setIsSubmitted","useEffect","search","data","results","item","urls","regular","alt_description","user","name","description","handleClick","console","log","exact","path","e","preventDefault","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.03a2f55a.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Input.css'\r\n\r\nfunction Input({placeHolder, handleChange, value}) {\r\n    return (\r\n        <input\r\n        type=\"text\"\r\n        className=\"Input\"\r\n        placeholder={placeHolder}\r\n        onChange={event => handleChange(event.target.value)}\r\n        value={value}\r\n        />\r\n    )\r\n}\r\nexport default Input\r\n","import React from 'react'\r\nimport './Button.css'\r\n\r\nfunction Button({title, ...rest}) {\r\n  return (\r\n    <button className=\"Button\" {...rest}>\r\n      {title}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default Button\r\n","import React from 'react'\r\nimport './Spinner.css'\r\n\r\nfunction Spinner() {\r\n    return (\r\n        <div className=\"spinner\" />\r\n    )\r\n}\r\n\r\nexport default Spinner","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport './Card.css';\r\n\r\nfunction Card({src, alt, title, subtitle, likes, id}) {\r\n  return (\r\n    <Link className=\"Card\" to={`/photos/${id}`}>\r\n      <img className=\"Card_img\" src={src} alt={alt}/>\r\n      <div className=\"Card_description\">\r\n        <p className=\"Card_title\">{title}\r\n          <span className=\"Card_likes\">  {likes} ♥</span>\r\n        </p>\r\n        <p className=\"Card_subtitle\" title={subtitle}>{subtitle}</p>\r\n      </div>\r\n    </Link>\r\n  )\r\n}\r\n\r\nexport default Card\r\n","import Input from \"./Input\";\r\nimport Button from \"./Button\";\r\nimport Spinner from \"./Spinner\";\r\nimport Card from \"./Card\";\r\nimport React from \"react\";\r\n\r\nconst Main = ({handleSubmit, searchString, setSearchString, isSubmitted, cards}) => {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"App-content\">\r\n        <form className=\"App-search\" onSubmit={handleSubmit}>\r\n          <Input\r\n            placeHolder=\"Введите текст для поиска\"\r\n            value={searchString}\r\n            handleChange={setSearchString}\r\n          />\r\n          <Button title={\"Искать\"} type=\"submit\"/>\r\n        </form>\r\n        <div className=\"App-cards\">\r\n          {isSubmitted\r\n            ? <Spinner/>\r\n            : cards.map((card) => <Card key={card.id} {...card} />)}\r\n        </div>\r\n      </div>\r\n\r\n    </div>\r\n  );\r\n}\r\nexport default Main;\r\n","import React from \"react\";\r\nimport {useParams, Link} from 'react-router-dom';\r\nimport './Photo.css';\r\n\r\nconst Photo = ({photos}) => {\r\n\r\n  const {id} = useParams();\r\n  const photo = photos.find(photo => photo.id === id);\r\n\r\n\r\n  return (\r\n    <div className=\"Photo\">\r\n      {\r\n        photo ?\r\n          <div className='Photo-container'>\r\n            <Link to=\"/\" className=\"Photo-go-back\">Назад</Link>\r\n            <img src={photo.src} alt={photo.alt} className=\"Photo-image\"/>\r\n            <p className=\"Photo-title\">{photo.title}</p>\r\n            <p className=\"Photo-subtitle\">{photo.subtitle}</p>\r\n          </div>\r\n\r\n          : <>\r\n            <p className=\"Photo-note\">Фотографий с данным id не найдено</p>\r\n            <Link to=\"/\" className=\"Photo-go-back\">Назад</Link>\r\n          </>\r\n      }\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Photo;\r\n","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport './NotFound.css';\r\n\r\nfunction NotFound() {\r\n  return (\r\n    <div className=\"NotFound\">\r\n      <p className=\"NoteFound-note\">\r\n        Страница не найдена\r\n        <Link className=\"NotFound-link\" to=\"/\">\r\n          Домой\r\n        </Link>\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default NotFound;\r\n","class Api {\n  constructor({ baseUrl, apiKey }) {\n    this._baseUrl = baseUrl;\n    this._apiKey = apiKey;\n  }\n\n  search(query) {\n    return fetch(`${this._baseUrl}/search/photos?query=${query}`, {\n      headers: {\n        Authorization: `Client-ID ${this._apiKey}`\n      }\n    })\n      .then(res => res.json())\n  }\n\n}\n\n\nconst api = new Api({\n  baseUrl: 'https://api.unsplash.com/',\n//  apiKey: 'e58e3582c206680c1a9401c750a2bd8293920f8e7cc301b614c14cb5f58c1bc1'\n    apiKey: '_fZkMjUcq2LatGDs3V0jFXhylBJYPF9HDraItzx6QFw'\n})\n\nexport default api;\n","import React from 'react';\nimport './App.css';\nimport Main from \"./Main\";\nimport Photo from './Photo';\nimport NotFound from \"./NotFound\";\nimport api from '../api/api';\nimport {Route, Switch} from 'react-router-dom';\n\n\nfunction App() {\n  const [cards, setCards] = React.useState([])\n  const [isSubmitted, setIsSubmitted] = React.useState(false)\n  const [searchString, setSearchString] = React.useState('')\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    setIsSubmitted(true);\n\n  }\n\n  React.useEffect(() => {\n    if (isSubmitted) {\n      api.search(searchString).then(data => {\n        setCards(data.results.map(item => ({\n          id: item.id,\n          src: item.urls.regular,\n          alt: item.alt_description,\n          title: item.user.name,\n          subtitle: item.description,\n          likes: item.likes,\n          handleClick: () => {\n            console.log('click')\n          }\n        })))\n        setIsSubmitted(false);\n        setSearchString('');\n      })\n    }\n\n  }, [isSubmitted, searchString])\n  return (\n    <Switch>\n      <Route exact path=\"/\">\n        <Main\n          handleSubmit={handleSubmit}\n          searchString={searchString}\n          cards={cards}\n          isSubmitted={isSubmitted}\n          setSearchString={setSearchString}\n        />\n      </Route>\n      <Route path=\"/photos/:id\">\n        <Photo\n          photos={cards}\n        />\n      </Route>\n      <Route path={\"*\"}>\n        <NotFound/>\n      </Route>\n    </Switch>\n\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport {HashRouter} from 'react-router-dom';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App/>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}